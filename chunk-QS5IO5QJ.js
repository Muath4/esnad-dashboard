import{a as m}from"./chunk-5POVDAZT.js";import{a as R,b as T,c as M,d as F,e as Y,f as j,g as H,i as _,j as q,k as z,l as K,m as k}from"./chunk-YZPGDIJO.js";import"./chunk-5KKSAYQM.js";import{a as G}from"./chunk-NFKFJGEM.js";import"./chunk-5YHN6KDB.js";import{a as Q}from"./chunk-KIJFJ5WB.js";import{a as J}from"./chunk-DFOWQSZE.js";import"./chunk-BX6Q2EGA.js";import"./chunk-D4IA4D73.js";import{Z as A,h as u,j as i}from"./chunk-YMYRQ6W5.js";import"./chunk-NE7DEP4F.js";import"./chunk-337ES2G7.js";import"./chunk-OWRAVFPR.js";import{a as D,b as B,h as X}from"./chunk-FU75TI2F.js";var d=new Map,v=new Map,V=new Map,te=u(()=>{v.clear(),V.clear(),d.clear()},"clear"),O=u((e,t)=>{let n=v.get(t)||[];return i.trace("In isDescendant",t," ",e," = ",n.includes(e)),n.includes(e)},"isDescendant"),ie=u((e,t)=>{let n=v.get(t)||[];return i.info("Descendants of ",t," is ",n),i.info("Edge is ",e),e.v===t||e.w===t?!1:n?n.includes(e.v)||O(e.v,t)||O(e.w,t)||n.includes(e.w):(i.debug("Tilt, ",t,",not in descendants"),!1)},"edgeInCluster"),W=u((e,t,n,c)=>{i.warn("Copying children of ",e,"root",c,"data",t.node(e),c);let s=t.children(e)||[];e!==c&&s.push(e),i.warn("Copying (nodes) clusterId",e,"nodes",s),s.forEach(o=>{if(t.children(o).length>0)W(o,t,n,c);else{let l=t.node(o);i.info("cp ",o," to ",c," with parent ",e),n.setNode(o,l),c!==t.parent(o)&&(i.warn("Setting parent",o,t.parent(o)),n.setParent(o,t.parent(o))),e!==c&&o!==e?(i.debug("Setting parent",o,e),n.setParent(o,e)):(i.info("In copy ",e,"root",c,"data",t.node(e),c),i.debug("Not Setting parent for node=",o,"cluster!==rootId",e!==c,"node!==clusterId",o!==e));let g=t.edges(o);i.debug("Copying Edges",g),g.forEach(a=>{i.info("Edge",a);let h=t.edge(a.v,a.w,a.name);i.info("Edge data",h,c);try{ie(a,c)?(i.info("Copying as ",a.v,a.w,h,a.name),n.setEdge(a.v,a.w,h,a.name),i.info("newGraph edges ",n.edges(),n.edge(n.edges()[0]))):i.info("Skipping copy of edge ",a.v,"-->",a.w," rootId: ",c," clusterId:",e)}catch(p){i.error(p)}})}i.debug("Removing node",o),t.removeNode(o)})},"copy"),Z=u((e,t)=>{let n=t.children(e),c=[...n];for(let s of n)V.set(s,e),c=[...c,...Z(s,t)];return c},"extractDescendants"),re=u((e,t,n)=>{let c=e.edges().filter(a=>a.v===t||a.w===t),s=e.edges().filter(a=>a.v===n||a.w===n),o=c.map(a=>({v:a.v===t?n:a.v,w:a.w===t?t:a.w})),l=s.map(a=>({v:a.v,w:a.w}));return o.filter(a=>l.some(h=>a.v===h.v&&a.w===h.w))},"findCommonEdges"),C=u((e,t,n)=>{let c=t.children(e);if(i.trace("Searching children of id ",e,c),c.length<1)return e;let s;for(let o of c){let l=C(o,t,n),g=re(t,n,l);if(l)if(g.length>0)s=l;else return l}return s},"findNonClusterChild"),U=u(e=>!d.has(e)||!d.get(e).externalConnections?e:d.has(e)?d.get(e).id:e,"getAnchorId"),se=u((e,t)=>{if(!e||t>10){i.debug("Opting out, no graph ");return}else i.debug("Opting in, graph ");e.nodes().forEach(function(n){e.children(n).length>0&&(i.warn("Cluster identified",n," Replacement id in edges: ",C(n,e,n)),v.set(n,Z(n,e)),d.set(n,{id:C(n,e,n),clusterData:e.node(n)}))}),e.nodes().forEach(function(n){let c=e.children(n),s=e.edges();c.length>0?(i.debug("Cluster identified",n,v),s.forEach(o=>{let l=O(o.v,n),g=O(o.w,n);l^g&&(i.warn("Edge: ",o," leaves cluster ",n),i.warn("Descendants of XXX ",n,": ",v.get(n)),d.get(n).externalConnections=!0)})):i.debug("Not a cluster ",n,v)});for(let n of d.keys()){let c=d.get(n).id,s=e.parent(c);s!==n&&d.has(s)&&!d.get(s).externalConnections&&(d.get(n).id=s)}e.edges().forEach(function(n){let c=e.edge(n);i.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(n)),i.warn("Edge "+n.v+" -> "+n.w+": "+JSON.stringify(e.edge(n)));let s=n.v,o=n.w;if(i.warn("Fix XXX",d,"ids:",n.v,n.w,"Translating: ",d.get(n.v)," --- ",d.get(n.w)),d.get(n.v)||d.get(n.w)){if(i.warn("Fixing and trying - removing XXX",n.v,n.w,n.name),s=U(n.v),o=U(n.w),e.removeEdge(n.v,n.w,n.name),s!==n.v){let l=e.parent(s);d.get(l).externalConnections=!0,c.fromCluster=n.v}if(o!==n.w){let l=e.parent(o);d.get(l).externalConnections=!0,c.toCluster=n.w}i.warn("Fix Replacing with XXX",s,o,n.name),e.setEdge(s,o,c,n.name)}}),i.warn("Adjusted Graph",m(e)),$(e,0),i.trace(d)},"adjustClustersAndEdges"),$=u((e,t)=>{if(i.warn("extractor - ",t,m(e),e.children("D")),t>10){i.error("Bailing out");return}let n=e.nodes(),c=!1;for(let s of n){let o=e.children(s);c=c||o.length>0}if(!c){i.debug("Done, no node has children",e.nodes());return}i.debug("Nodes = ",n,t);for(let s of n)if(i.debug("Extracting node",s,d,d.has(s)&&!d.get(s).externalConnections,!e.parent(s),e.node(s),e.children("D")," Depth ",t),!d.has(s))i.debug("Not a cluster",s,t);else if(!d.get(s).externalConnections&&e.children(s)&&e.children(s).length>0){i.warn("Cluster without external connections, without a parent and with children",s,t);let l=e.graph().rankdir==="TB"?"LR":"TB";d.get(s)?.clusterData?.dir&&(l=d.get(s).clusterData.dir,i.warn("Fixing dir",d.get(s).clusterData.dir,l));let g=new J({multigraph:!0,compound:!0}).setGraph({rankdir:l,nodesep:50,ranksep:50,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}});i.warn("Old graph before copy",m(e)),W(s,e,g,s),e.setNode(s,{clusterNode:!0,id:s,clusterData:d.get(s).clusterData,label:d.get(s).label,graph:g}),i.warn("New graph after copy node: (",s,")",m(g)),i.debug("Old graph after copy",m(e))}else i.warn("Cluster ** ",s," **not meeting the criteria !externalConnections:",!d.get(s).externalConnections," no parent: ",!e.parent(s)," children ",e.children(s)&&e.children(s).length>0,e.children("D"),t),i.debug(d);n=e.nodes(),i.warn("New list of nodes",n);for(let s of n){let o=e.node(s);i.warn(" Now next level",s,o),o?.clusterNode&&$(o.graph,t+1)}},"extractor"),L=u((e,t)=>{if(t.length===0)return[];let n=Object.assign([],t);return t.forEach(c=>{let s=e.children(c),o=L(e,s);n=[...n,...o]}),n},"sorter"),oe=u(e=>L(e,e.children()),"sortNodesByHierarchy"),I=u((e,t,n,c,s,o)=>X(void 0,null,function*(){i.warn("Graph in recursive render:XAX",m(t),s);let l=t.graph().rankdir;i.trace("Dir in recursive render - dir:",l);let g=e.insert("g").attr("class","root");t.nodes()?i.info("Recursive render XXX",t.nodes()):i.info("No nodes found for",t),t.edges().length>0&&i.info("Recursive edges",t.edge(t.edges()[0]));let a=g.insert("g").attr("class","clusters"),h=g.insert("g").attr("class","edgePaths"),p=g.insert("g").attr("class","edgeLabels"),b=g.insert("g").attr("class","nodes");yield Promise.all(t.nodes().map(function(f){return X(this,null,function*(){let r=t.node(f);if(s!==void 0){let w=JSON.parse(JSON.stringify(s.clusterData));i.trace(`Setting data for parent cluster XXX
 Node.id = `,f,`
 data=`,w.height,`
Parent cluster`,s.height),t.setNode(s.id,w),t.parent(f)||(i.trace("Setting parent",f,s.id),t.setParent(f,s.id,w))}if(i.info("(Insert) Node XXX"+f+": "+JSON.stringify(t.node(f))),r?.clusterNode){i.info("Cluster identified XBX",f,r.width,t.node(f));let{ranksep:w,nodesep:y}=t.graph();r.graph.setGraph(B(D({},r.graph.graph()),{ranksep:w+25,nodesep:y}));let E=yield I(b,r.graph,n,c,t.node(f),o),S=E.elem;_(r,S),r.diff=E.diff||0,i.info("New compound node after recursive render XAX",f,"width",r.width,"height",r.height),z(S,r)}else t.children(f).length>0?(i.trace("Cluster - the non recursive path XBX",f,r.id,r,r.width,"Graph:",t),i.trace(C(r.id,t)),d.set(r.id,{id:C(r.id,t),node:r})):(i.trace("Node - the non recursive path XAX",f,b,t.node(f),l),yield q(b,t.node(f),{config:o,dir:l}))})})),yield u(()=>X(void 0,null,function*(){let f=t.edges().map(function(r){return X(this,null,function*(){let w=t.edge(r.v,r.w,r.name);i.info("Edge "+r.v+" -> "+r.w+": "+JSON.stringify(r)),i.info("Edge "+r.v+" -> "+r.w+": ",r," ",JSON.stringify(t.edge(r))),i.info("Fix",d,"ids:",r.v,r.w,"Translating: ",d.get(r.v),d.get(r.w)),yield F(p,w)})});yield Promise.all(f)}),"processEdges")(),i.info("Graph before layout:",JSON.stringify(m(t))),i.info("############################################# XXX"),i.info("###                Layout                 ### XXX"),i.info("############################################# XXX"),Q(t),i.info("Graph after layout:",JSON.stringify(m(t)));let P=0,{subGraphTitleTotalMargin:x}=G(o);return yield Promise.all(oe(t).map(function(f){return X(this,null,function*(){let r=t.node(f);if(i.info("Position XBX => "+f+": ("+r.x,","+r.y,") width: ",r.width," height: ",r.height),r?.clusterNode)r.y+=x,i.info("A tainted cluster node XBX1",f,r.id,r.width,r.height,r.x,r.y,t.parent(f)),d.get(r.id).node=r,k(r);else if(t.children(f).length>0){i.info("A pure cluster node XBX1",f,r.id,r.x,r.y,r.width,r.height,t.parent(f)),r.height+=x,t.node(r.parentId);let w=r?.padding/2||0,y=r?.labelBBox?.height||0,E=y-w||0;i.debug("OffsetY",E,"labelHeight",y,"halfPadding",w),yield R(a,r),d.get(r.id).node=r}else{let w=t.node(r.parentId);r.y+=x/2,i.info("A regular node XBX1 - using the padding",r.id,"parent",r.parentId,r.width,r.height,r.x,r.y,"offsetY",r.offsetY,"parent",w,w?.offsetY,r),k(r)}})})),t.edges().forEach(function(f){let r=t.edge(f);i.info("Edge "+f.v+" -> "+f.w+": "+JSON.stringify(r),r),r.points.forEach(S=>S.y+=x/2);let w=t.node(f.v);var y=t.node(f.w);let E=j(h,r,d,n,w,y,c);Y(r,E)}),t.nodes().forEach(function(f){let r=t.node(f);i.info(f,r.type,r.diff),r.isGroup&&(P=r.diff)}),i.warn("Returning from recursive render XAX",g,P),{elem:g,diff:P}}),"recursiveRender"),we=u((e,t)=>X(void 0,null,function*(){let n=new J({multigraph:!0,compound:!0}).setGraph({rankdir:e.direction,nodesep:e.config?.nodeSpacing||e.config?.flowchart?.nodeSpacing||e.nodeSpacing,ranksep:e.config?.rankSpacing||e.config?.flowchart?.rankSpacing||e.rankSpacing,marginx:8,marginy:8}).setDefaultEdgeLabel(function(){return{}}),c=t.select("g");H(c,e.markers,e.type,e.diagramId),K(),M(),T(),te(),e.nodes.forEach(o=>{n.setNode(o.id,D({},o)),o.parentId&&n.setParent(o.id,o.parentId)}),i.debug("Edges:",e.edges),e.edges.forEach(o=>{if(o.start===o.end){let l=o.start,g=l+"---"+l+"---1",a=l+"---"+l+"---2",h=n.node(l);n.setNode(g,{domId:g,id:g,parentId:h.parentId,labelStyle:"",label:"",padding:0,shape:"labelRect",style:"",width:10,height:10}),n.setParent(g,h.parentId),n.setNode(a,{domId:a,id:a,parentId:h.parentId,labelStyle:"",padding:0,shape:"labelRect",label:"",style:"",width:10,height:10}),n.setParent(a,h.parentId);let p=structuredClone(o),b=structuredClone(o),N=structuredClone(o);p.label="",p.arrowTypeEnd="none",p.id=l+"-cyclic-special-1",b.arrowTypeEnd="none",b.id=l+"-cyclic-special-mid",N.label="",h.isGroup&&(p.fromCluster=l,N.toCluster=l),N.id=l+"-cyclic-special-2",n.setEdge(l,g,p,l+"-cyclic-special-0"),n.setEdge(g,a,b,l+"-cyclic-special-1"),n.setEdge(a,l,N,l+"-cyc<lic-special-2")}else n.setEdge(o.start,o.end,D({},o),o.id)}),i.warn("Graph at first:",JSON.stringify(m(n))),se(n),i.warn("Graph after XAX:",JSON.stringify(m(n)));let s=A();yield I(c,n,e.type,e.diagramId,void 0,s)}),"render");export{we as render};
